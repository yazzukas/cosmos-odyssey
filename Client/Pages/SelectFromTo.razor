
<MudGrid Class="d-flex justify-space-between py-2 px-1 mt-6">
    <MudItem xs="12" sm="6" md="6">
        <MudSelect T="string" Label="From" HelperText="Where your trip starts?" ValueChanged="@((string planet) => { FromPlanetChange(planet); })">
            @foreach (var planet in Information.PlanetNames)
            {
                <MudSelectItem Value=@planet />
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="6" md="6">
        <MudSelect T="string" Label="Destination" HelperText="Where your trip ends?" @bind-value="Destination">
            @foreach (var planet in _destinationPlanets)
            {
                <MudSelectItem Value=@planet />
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="12" md="12">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Filled.Search" Color="Color.Primary" FullWidth="true" @onclick="OnConfirmationClick">Find travel routes</MudButton>
    </MudItem>
</MudGrid>

@if (_isEmptyField)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-2">Select travel start and end planet!</MudAlert>
}

@code {

    [Parameter] public string From { get; set; }
    [Parameter] public string Destination { get; set; }
    [Parameter] public EventCallback<EventCallbackArgs> RouteChanged { get; set; }

    private bool _isEmptyField = false;
    private EventCallbackArgs _args { get; set; }
    private List<string> _destinationPlanets = new List<string> { };

    private async Task OnConfirmationClick()
    {
        if (From == null || Destination == null) _isEmptyField = true;
        else
        {
            _isEmptyField = false;
            _args = new EventCallbackArgs { From = From, To = Destination };
            await RouteChanged.InvokeAsync(_args);
        }
    }

    private void FromPlanetChange(string planet)
    {
        if (Information.PossibleRoutes.ContainsKey(planet))
        {
            From = planet;
            _destinationPlanets = Information.PossibleRoutes[planet];
        }
    }

}
